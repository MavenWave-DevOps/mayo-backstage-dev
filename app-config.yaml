app:
  title: Mirage Backstage
  baseUrl: http://localhost:3000 #https://mirage.px-dev.mavenwave.dev
  support:
    url: https://github.com/backstage/backstage/issues
    items:
      - title: Backstage Community
        icon: chat
        links:
          - url: https://backstage.io/docs/overview/support
            title: Support and community
      - title: Backstage News
        icon: docs
        links:
          - url: https://backstage.io/blog/
            title: Backstage Blog
  permission:
    enabled: true

organization:
  name: Maven Wave

backend:
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}

  apiUrl: http://localhost:7007 # "http://mirage.px-dev.mavenwave.dev/run"
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}

  # baseUrl: http://backstage-mike.px.igniteme.dev

  baseUrl: http://localhost:7007 # http://mirage.px-dev.mavenwave.dev
  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  csp:
    connect-src: ["'self'", "http:", "https:"]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:7007
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ":memory:"
    # client: pg
    # connection:
    #   host: localhost #${POSTGRES_HOST}
    #   port: 5432
    #   user: postgres # ${POSTGRES_USER}
    #   password: secret # ${POSTGRES_PASSWORD}
    # plugin:
    #   catalog:
    #     connection:
    #       database: postgres
    # app:
    #   connection:
    #     database: postgres
  cache:
    store: memory

  # workingdirectory: /tmp # use this to configure a working directory for the scaffolder, defaults to the os temp-dir

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
      # apps:
      # - $include: github-app-backstage-projectx-test1-credentials.yaml

proxy:
  "/grafana/api":
    target: https://backstage.devstats.cncf.io
    headers:
      Authorization: Bearer ${GRAFANA_TOKEN}

grafana:
  domain: https://backstage.devstats.cncf.io
# reference documentation http://backstage.io/docs/features/techdocs/configuration
# note: after experimenting with basic setup, use ci/cd to generate docs
# and an external cloud storage when deploying techdocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
auth:
  environment: development
  providers:
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
    google:
      development:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
    microsoft:
      development:
        clientId: ${AUTH_MICROSOFT_CLIENT_ID}
        clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
        tenantId: ${AUTH_MICROSOFT_TENANT_ID}


scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  locations: []

costInsights:
  engineerCost: 200000
  products:
    computeEngine:
      name: Compute Engine
      icon: compute
    cloudStorage:
      name: Cloud Storage
      icon: storage
    bigQuery:
      name: BigQuery
      icon: search
  metrics:
    DAU:
      name: Daily Active Users
      default: true
    MSC:
      name: Monthly Subscribers

techdocs:
  builder: "external"
  generator:
    runIn: "local" # alternatives - 'docker'
  publisher:
    type: "local"

# This is for k8s cluster management
# Currently, just using a minikube cluster
# TODO: Install backstage in GKE then point to GKE cluster

kubernetes:
  serviceLocatorMethod:
    type: "multiTenant"
  clusterLocationMethdos:
    - type: "config"
      clusters:
        - url: http://127.0.0.1:9999 # found by running `kubectl cluster-info`
          name: minikube # unique within backstage project
          authProvider: "serviceAccount" # uses a k8s sa, can use google sa
          skipTLSVerify: false # k8s client verifies the TLS certificate presented by the API
          skipMetricsLookup: true
          # serviceAccountToken: ${K8S_MINIKUBE_TOKEN} # kubectl get secret
          # dashboardUrl: http://127.0.0.1:64713
          # dashboardApp: standard
          # caData: ${K8S_CONFIG_CA_DATA}
          caFile: "~/.minikube/ca.pem"
          # customResources:
          #   - group: 'argoproj.io'
          #     apiVersion: 'v1alpha1'
          #     plural: 'rollouts'
